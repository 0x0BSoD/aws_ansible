---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - vars/main.yml
    - vars/instances.yml
  vars:
    nginx_conf_dict: {}
    avaliability_zones: []

  pre_tasks:
    - name: Gather information about Amazon Linuxes
      ec2_ami_info:
        owners: amazon
        filters:
          name: "amzn2-ami-hvm-2.*-x86_64-gp2"
      register: AMIs

    - name: Get latest AMI
      set_fact:
        AMI: "{{ AMIs.images | last }}"

  tasks:
    # ====================================================================
    # parse instances
    - name: Register app subnets 
      set_fact:
        app_instances: "{{ item.subnets }}"
      loop: "{{ instances }}"
      when: item.name == "app"

    - name: Register web subnets 
      set_fact:
        web_instances: "{{ item.subnets }}"
      loop: "{{ instances }}"
      when: item.name == "web"

    # ====================================================================
    - name: Build AZ-app dict
      include_tasks: plays/subnets.yml
      loop: "{{ app_instances }}"

    # ====================================================================
    # ec2 instances
    - name: Provisioning app instances
      include_tasks: plays/app.yml
      loop: "{{ app_instances }}"

    - name: Provisioning web instances
      include_tasks: plays/web.yml
      loop: "{{ web_instances }}"

    # ====================================================================
    # Here I check whether it is necessary to remove some instances of ec2
    # apps ===
    - name: Check app instances 
      ec2_instance_info:
        filters:
          "tag:Name": app_*
          instance-state-name: [ "running" ]
      register: ec2_app_instances

    - name: Check for remove app_instances
      ec2:
        state: "absent"
        instance_ids: "{{ item.instance_id }}"
        region: "{{ region }}"
      when: app_instances | selectattr('seq_num', 'eq', item.tags.Name.split('_')[1]) | list | length == 0
      loop: "{{ ec2_app_instances.instances }}"
    
    - name: Check app instances again for build nginx config
      ec2_instance_info:
        filters:
          "tag:Name": app_*
          instance-state-name: [ "running" ]
      register: ec2_app_instances

    # web lb ===
    - name: Check web instances 
      ec2_instance_info:
        filters:
          "tag:Name": web_*
          instance-state-name: [ "running" ]
      register: ec2_web_instances

    - name: Check for remove web_instances
      ec2:
        state: "absent"
        instance_ids: "{{ item.instance_id }}"
        region: "{{ region }}"
      when: web_instances | selectattr('seq_num', 'eq', item.tags.Name.split('_')[1]) | list | length == 0
      loop: "{{ ec2_web_instances.instances }}"

    - name: Check web instances again for build inventory
      ec2_instance_info:
        filters:
          "tag:Name": web_*
          instance-state-name: [ "running" ]
      register: ec2_web_instances

    - name: Add running instance to host group
      add_host:
          hostname: "{{ k.public_ip_address }}"
          groupname: launched
          ansible_ssh_user: ec2-user
          ansible_ssh_private_key_file: "./{{ nginx_ssh_key }}.pem"
          apps:  "{{ ec2_app_instances.instances | json_query(query) }}"
      vars:
          query: "[?placement.availability_zone=='{{ k.placement.availability_zone }}'].private_dns_name"
      loop: "{{ ec2_web_instances.instances }}"
      loop_control:
        loop_var: k

# ====================================================================
# Configuratiot of LB hosts
- hosts: launched
  become: True
  gather_facts: True
  vars:
    apps: []
  tasks:
    - name: Provision nginx
      include_tasks: plays/nginx.yml